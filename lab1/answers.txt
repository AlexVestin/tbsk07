1.1
    1. in the center
    2. up, right
    3. yes using uniforms or attributes
1.2
    1. they are keywords signifying that the data is to be passed around (in/out from the shader & main program)
    2. The vertex shader handles transformations of individual vertices
    3. glUniformMatrix4fv pushes four float values to the uniform location
1.3 
    1. 50fps 0.02 sec "frame length"
1.4
    1. Needed to add an out from the vertex shader to the fragment shader.
    2. Passing information from the vertex shader to the fragment shader.
    3. flat shading (?), a uniform vec3 could be used instead
1.5
    1. Miswrote the rotatematrices, needed to make he vertices the same "winding"
    2. By changing the order of the vertices
1.6
    1. Why do we need normal vectors for a model?
    - they can be used for backface culling, smooth shading and more
    2. What did you do in your fragment shader?
    - I used the normals as color
    3. Should a normal vector always be perpendicular to a certain triangle? If not, why?
    - no, sometimes they should be the normal of a bigger surface / multiple triangles (?)
    4. Now we are using glBindBuffer and glBufferData again. They deal with buffers, but in what way?
    - glBindData binds a buffer as the "active" one, glBufferData uploads the data
  


